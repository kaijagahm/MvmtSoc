---
title: "Network visualizations"
format:
  html:
    embed-resources: true
editor: visual
---

## Visualizing social networks

```{r}
#| include: false
library(tidyverse)
library(ggraph)
library(tidygraph)
library(igraph)
library(here)
```

```{r}
#| include: false
load(here("data", "calcSocial", "feedingGraphs.Rda"))
load(here("data", "calcSocial", "flightGraphs.Rda"))
load(here("data", "calcSocial", "roostingGraphs.Rda"))
load(here("data", "calcSocial", "networkMetrics.Rda"))
load(here("data", "mixedModels", "linked.Rda"))
load(here("data/dataPrep/season_names.Rda"))

# Have to join `linked` back to `networkMetrics` so we maintain the network values for those that don't ultimately get included in movement
info <- networkMetrics %>%
  left_join(linked %>%
              select(Nili_id, "season" = seasonUnique, daysTracked, propDaysTracked, birth_year, sex, space_use, movement, roost_div, age, age_group, type)) %>%
  mutate(focal = case_when(is.na(movement) & 
                             is.na(space_use) & 
                             is.na(roost_div) ~ FALSE,
                           TRUE ~ TRUE),
         label = case_when(!focal ~ Nili_id,
                           TRUE ~ NA_character_)) %>%
  mutate(season = factor(season, levels = season_names))
nrow(info) == nrow(networkMetrics) # TRUE
nrow(linked) < nrow(info) # TRUE

infos_flight <- info %>%
  filter(type == "flight") %>%
  group_by(season) %>%
  group_split()
infos_feeding <- info %>%
  filter(type == "feeding") %>%
  group_by(season) %>%
  group_split()
infos_roosting <- info %>%
  filter(type == "roosting") %>%
  group_by(season) %>%
  group_split()

flightGraphs <- map2(flightGraphs, infos_flight, ~{
  .x %>% 
    as_tbl_graph() %>%
    activate(nodes) %>%
    left_join(.y, by = c("name" = "Nili_id"))
})
feedingGraphs <- map2(feedingGraphs, infos_feeding, ~{
  .x %>% 
    as_tbl_graph() %>%
    activate(nodes) %>%
    left_join(.y, by = c("name" = "Nili_id"))
})
roostingGraphs <- map2(roostingGraphs, infos_roosting, ~{
  .x %>% 
    as_tbl_graph() %>%
    activate(nodes) %>%
    left_join(.y, by = c("name" = "Nili_id"))
})
```

```{r}
#| message: false
# Network visualizations ----------------------------------------------------------------
# This process only works for the color scaling because we know our minimum degree value is 0 and our maximum degree value is 1. For strength, it's going to be more complicated.
grph_deg <- function(graph, season_name, type){
  min <- graph %>% activate(nodes) %>% pull(normDegree) %>% min()
  max <- graph %>% activate(nodes) %>% pull(normDegree) %>% max()
   g <- graph %>%
    ggraph(layout = "fr")+
    geom_edge_link(alpha = 0.2)+
    geom_node_point(aes(size = normDegree, col = normDegree, shape = dataset))+
    # geom_node_text(aes(label = label,
    #                    hjust = -0.2, vjust = 0.1))+
    scale_shape_manual(name = "Dataset", values = c(17, 16, 18))+
    scale_color_viridis(begin = min, end = max)+
    theme(legend.position = "none")+
    ggtitle(season_name)
  return(g)
}

minstr <- min(info$normStrength)
maxstr <- max(info$normStrength) # XXX CHECK THIS
grph_str <- function(graph, season_name, type){
  min <- graph %>% activate(nodes) %>% pull(normStrength) %>% min()
  max <- graph %>% activate(nodes) %>% pull(normStrength) %>% max()
  g <- graph %>%
    ggraph(layout = "fr")+
    geom_edge_link(alpha = 0.2)+
    geom_node_point(aes(size = normStrength, 
                        col = normStrength*(1/maxstr), 
                        shape = dataset))+
    # geom_node_text(aes(label = label,
    #                    hjust = -0.2, vjust = 0.1))+
    scale_shape_manual(name = "Dataset", values = c(17, 16, 18))+
    scale_color_viridis()+
    theme(legend.position = "none")+
    ggtitle(season_name)
  return(g)
}

grph_str(flightGraphs[[1]], "2020_fall", type = "flight")
grph_deg(flightGraphs[[2]], "2021_breeding", type = "flight")
grph_deg(flightGraphs[[3]], "2021_summer", type = "flight")
grph_deg(roostingGraphs[[6]], "2022_summer", type = "roosting")
```

```{r}
flightPlots_degree <- map2(.x = flightGraphs, .y = season_names, ~grph_deg(.x, .y, type = "flight"))
feedingPlots_degree <- map2(.x = feedingGraphs, .y = season_names, ~grph_deg(.x, .y, type = "feeding"))
roostingPlots_degree <- map2(.x = roostingGraphs, .y = season_names, ~grph_deg(.x, .y, type = "roosting"))

flightPlots_strength <- map2(.x = flightGraphs, .y = season_names, ~grph_str(.x, .y, type = "flight"))
feedingPlots_strength <- map2(.x = feedingGraphs, .y = season_names, ~grph_str(.x, .y, type = "feeding"))
roostingPlots_strength <- map2(.x = roostingGraphs, .y = season_names, ~grph_str(.x, .y, type = "roosting"))

fl_d <- patchwork::wrap_plots(flightPlots_degree, nrow = 3, ncol = 3)
fe_d <- patchwork::wrap_plots(feedingPlots_degree, nrow = 3, ncol = 3)
ro_d <- patchwork::wrap_plots(roostingPlots_degree, nrow = 3, ncol = 3)
ggsave(fl_d, filename = here("fig", "networkGraphs", "seasonal", "degree", "flight.png"), width = 9, height = 7, bg = "transparent")
ggsave(fe_d, filename = here("fig", "networkGraphs", "seasonal", "degree", "feeding.png"), width = 9, height = 7, bg = "transparent")
ggsave(ro_d, filename = here("fig", "networkGraphs", "seasonal", "degree", "roosting.png"), width = 9, height = 7, bg = "transparent")

fl_s <- patchwork::wrap_plots(flightPlots_strength, nrow = 3, ncol = 3)
fe_s <- patchwork::wrap_plots(feedingPlots_strength, nrow = 3, ncol = 3)
ro_s <- patchwork::wrap_plots(roostingPlots_strength, nrow = 3, ncol = 3)
ggsave(fl_s, filename = here("fig", "networkGraphs", "seasonal", "strength", "flight.png"), width = 9, height = 7, bg = "transparent")
ggsave(fe_s, filename = here("fig", "networkGraphs", "seasonal", "strength", "feeding.png"), width = 9, height = 7, bg = "transparent")
ggsave(ro_s, filename = here("fig", "networkGraphs", "seasonal", "strength", "roosting.png"), width = 9, height = 7, bg = "transparent")
```
