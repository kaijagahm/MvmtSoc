---
title: "More straightforward movement variable definitions"
execute: 
  echo: false
format: 
  html:
    embed-resources: true
    code-fold: true
    code-summary: "Show code"
editor: visual
---

```{r setup}
#| include: false
library(tidyverse)
library(sf)
library(factoextra)
library(ade4)
load(here::here("data", "calcMovement", "movementBehavior.Rda"))
load(here::here("data", "dataPrep", "season_names.Rda"))
load(here::here("data", "derived", "cc.Rda"))

# retrieve age information, since it wasn't carried through in the movement analysis (oops)
load(here::here("data", "dataPrep", "downsampled_10min.Rda"))
ages <- map(downsampled_10min, ~.x %>%
              dplyr::select(Nili_id, seasonUnique, season, year, age, age_group) %>%
              distinct()) %>%
  purrr::list_rbind()
rm(downsampled_10min) # XXX need to do this in a faster way--attach age at an earlier stage probably

# Create a dataset with all seasons combined
allMovementBehavior <- purrr::list_rbind(movementBehavior)
movementBehaviorScaled <- allMovementBehavior %>%
  mutate(across(-c(Nili_id, seasonUnique, birth_year, sex, dataset, 
                   homeRange, coreArea, coreAreaFidelity), # not scaling the space use params, because I'm not putting those into a PCA.
                function(x){as.numeric(as.vector(scale(x)))}))
```

## Categorize the movement behaviors, and reduce the number of movement behaviors that we're including

```{r}
#| include: false
demo <- movementBehaviorScaled %>%
  dplyr::select(Nili_id, seasonUnique, daysTracked, propDaysTracked, dataset, birth_year, sex)
space_use <- movementBehaviorScaled %>%
  dplyr::select(Nili_id, seasonUnique, coreArea, homeRange, coreAreaFidelity)
movement <- movementBehaviorScaled %>%
  dplyr::select(Nili_id, seasonUnique, mnDailyMaxAlt, mnDailyMedAlt, meanDFD, maxDFD, meanDMD, meanDDT, mnTort)
roost_behavior <- movementBehaviorScaled %>%
  dplyr::select(Nili_id, seasonUnique, propSwitch, shannon, uniqueRoosts)
```

I first thought to do separate PCA's of each of these categories. But that doesn't make sense, especially for something like space use, where there are really only two metrics (and then one that's the combination of each of them)

Instead, I want to make these more biologically motivated. Let's do the following:

1\) home range only (but make it using AKDE method so it's actually defensible)

2\) PCA of movement behaviors only

3\) PCA of roost behaviors

## Movement PCA

```{r}
pca_movement <- prcomp(movement[,-c(1:2)])
fviz_pca_biplot(pca_movement, axes = c(1,2), 
                geom = c("point"), 
                alpha.ind = 0.3,
                repel = T)+
  theme_classic()
fviz_screeplot(pca_movement, addLabels = T) # that's pretty strongly loaded on the first principal component, so I think I can justify just using that as an overall measure of movement. To double check, let's see the contributions:
contrib_movement <- round(pca_movement$rotation[,1:3]*-100, 2) %>%
  as.data.frame() 
contrib_movement # Okay, PC1 does seem like it can be a general measure of movement.
movement <- movement %>%
  mutate(movement_pc1 = pca_movement$x[,1]*-1)
```

### Interpretation

```{r}
#| warning: false
#| message: false

movement %>%
  pivot_longer(cols = c("mnDailyMaxAlt", "mnDailyMedAlt", "meanDFD", "maxDFD", "meanDMD", "meanDDT", "mnTort"),
               names_to = "measure", values_to = "value") %>%
  mutate(measure = fct_recode(measure,
                              "Daily max. altitude (seasonal avg)" =
                                "mnDailyMaxAlt",
                              "Daily median altitude (seasonal avg)" = 
                                "mnDailyMedAlt",
                              "Daily flight time (seasonal avg)" = 
                                "meanDFD",
                              "Daily flight time (seasonal max)" = 
                                "maxDFD",
                              "Daily max displacement (seasonal avg)" = 
                                "meanDMD",
                              "Daily distance traveled (seasonal avg)" = 
                                "meanDDT",
                              "Tortuosity (seasonal avg)" = 
                                "mnTort")) %>%
  ggplot(aes(x = movement_pc1, y = value))+
  geom_point()+geom_smooth(method = "lm")+theme_minimal()+
  facet_wrap(~measure, labeller = labeller(measure = label_wrap_gen(30)))+
  ylab("Value (scaled)")+
  theme(legend.position = "none")
```

Individuals with higher movement PC1 values fly higher and farther, spend more time flying, and have straighter paths than individuals with lower movement PC1 values. Let's call this measure just "movement".

## Roost behavior PCA

```{r}
pca_roost <- prcomp(roost_behavior[,-c(1:2)])
fviz_pca_biplot(pca_roost, axes = c(1,2), 
                geom = c("point"), 
                alpha.ind = 0.3,
                repel = T)+
  theme_classic()
fviz_screeplot(pca_roost, addLabels = T) # This is also strongly loaded on one principal component, so I feel quite comfortable taking it as a measure of roost diversification/routine
contrib_roost <- round(pca_roost$rotation[,1:3]*-100, 2) %>%
  as.data.frame()
contrib_roost
roost_behavior <- roost_behavior %>%
  mutate(roost_pc1 = pca_roost$x[,1]*-1)
```

### Interpretation

```{r}
#| warning: false
#| message: false

roost_behavior %>%
  rename("Shannon roost diversity" = "shannon", "Unique roosts" = "uniqueRoosts", "Prop. nights roost-switching" = "propSwitch") %>%
  pivot_longer(cols = c("Shannon roost diversity", "Unique roosts", "Prop. nights roost-switching"),
               names_to = "measure", values_to = "value") %>%
  ggplot(aes(x = roost_pc1, y = value))+
  geom_point()+geom_smooth(method = "lm")+theme_minimal()+
  facet_wrap(~measure)+
  ylab("Value (scaled)")+
  theme(legend.position = "none")
```

Individuals that are higher on the roost PC1 have more unique roosts, a higher roost diversity, and switch roosts more often. Let's call this a measure of "**roost site diversification**" or something like that.

## Variable distributions

```{r}
#| message: false
#| warning: false
#| include: false
# Create a reduced dataset that only includes our measures of interest
red <- demo %>%
  left_join(space_use %>% dplyr::select(Nili_id, seasonUnique, homeRange)) %>%
  left_join(movement %>% dplyr::select(Nili_id, seasonUnique, movement_pc1)) %>%
  left_join(roost_behavior %>% dplyr::select(Nili_id, seasonUnique, roost_pc1)) %>%
  rename("space_use" = "homeRange",
         "movement" = "movement_pc1",
         "roost_div" = "roost_pc1")
nrow(red) == nrow(demo) # checking that the number of rows hasn't changed
red_long <- red %>%
  pivot_longer(cols = c("space_use", "movement", "roost_div"),
               names_to = "var",
               values_to = "value")
```

Let's examine these predictor variables

```{r}
#| message: false
#| warning: false
colors <- c("firebrick2", "blue", "gold")
red_long %>%
  ggplot(aes(x = value, col = var, fill = var))+
  geom_histogram()+ theme_minimal()+
  facet_wrap(~var, scales = "free")+
  scale_color_manual(values = colors)+
  scale_fill_manual(values = colors)+
  theme(legend.position = "none")+
  ylab("Frequency")+xlab("")
```

We can see here that we have another problem. Since `movement` and `roost_div` are composite variables derived from PCAs, they are pretty close to normally distributed. Meanwhile, our space use variable is very right-skewed, because it's a measure of area.

Let's log-tranform the space use variable to make the distributions more comparable and therefore make the modeling easier.

```{r}
#| include: false
red <- red %>%
  mutate(space_use_log = log(space_use))
red_long <- red %>%
  pivot_longer(cols = c("space_use", 
                        "space_use_log", 
                        "movement", 
                        "roost_div"),
               names_to = "var",
               values_to = "value")
```

Re-examine the distributions of the variables after log-transforming:

```{r}
#| message: false
#| warning: false
red_long %>%
  filter(var != "space_use") %>%
  ggplot(aes(x = value, col = var, fill = var))+
  geom_histogram()+ theme_minimal()+
  facet_wrap(~var, scales = "free")+
  scale_fill_manual(values = colors)+
  scale_color_manual(values = colors)+
  theme(legend.position = "none")+
  ylab("Frequency")+xlab("")
```

Okay that's still not perfect, but it's a lot better.

*Note also that this outcome may change after we calculate the home ranges by better means (AKDE).*

## Correlations

These are still three measures of movement, so I expect that they will be at least somewhat correlated. Let's take a look!

**Movement** and **roost diversification** are definitely correlated, but the correlation isn't super high: `r round(cor(red$movement, red$roost_div), 2)`.

```{r}
#| message: false
#| warning: false
red %>%
  ggplot(aes(x = movement, y = roost_div))+
  geom_point(color = "purple")+ geom_smooth(method = "lm", col = "purple")+ theme_minimal()
```

**Roost diversification** and **log-transformed home range** have a stronger correlation of `r round(cor(red$roost_div, red$space_use_log), 2)`.

```{r}
#| message: false
#| warning: false
red %>%
  ggplot(aes(x = roost_div, y = space_use_log))+
  geom_point(color = "chartreuse3")+ geom_smooth(method = "lm", col = "chartreuse3")+ theme_minimal()
```

Finally, **log-transformed home range** and **movement** have a correlation of `r round(cor(red$space_use_log, red$movement), 2)`.

```{r}
#| message: false
#| warning: false
red %>%
  ggplot(aes(x = space_use_log, y = movement))+
  geom_point(color = "orange2")+ geom_smooth(method = "lm", col = "orange2")+ theme_minimal()
```

There is enough correlation here that we're going to have to be careful, but I don't think there's enough that we have to not proceed. These predictors seem more biologically defensible because they are created a priori instead of derived from a single PCA.

## Examine effects of age and sex

```{r}
#| include: false
# Add age information
joined_ages <- red %>%
  left_join(ages)
nrow(joined_ages) == nrow(red) # FALSE because individuals can have multiple ages during a season. We can't have that!
joined_ages %>% group_by(Nili_id, seasonUnique) %>% filter(n() > 1)  %>% pull(seasonUnique) %>% unique() # indeed, it's just during the breeding seasons that this happens.

# For now, let's go with the older age, but I'm going to double-check with Marta about this. # XXX
ages_older <- ages %>%
  group_by(Nili_id, seasonUnique) %>%
  arrange(desc(age), .by_group = T) %>%
  slice(1) %>%
  ungroup()

red <- red %>%
  left_join(ages_older)
```

Let's see if the relationships between these variables and age are consistent with what Marta found (they should be!)

```{r}
#| warning: false
#| message: false
red %>%
  pivot_longer(cols = c("movement", "roost_div", "space_use_log"),
               names_to = "var", values_to = "value") %>%
  ggplot(aes(x = age, y = value, group = seasonUnique, col = var))+
  geom_point(alpha = 0.5) + geom_smooth(se = F)+
  theme_minimal()+
  xlab("Age")+
  facet_wrap(~var, scales = "free")+
  scale_color_manual(values = colors)+
  theme(legend.position = "none")
```

We sort of recover the same patterns as Marta, but they're not perfectly clear-cut.

Just in case we had any doubts about vultures' lack of sexual dimorphism...

```{r}
#| warning: false
#| message: false
red %>%
  filter(!is.na(sex), sex != "NA") %>%
  pivot_longer(cols = c("movement", "roost_div", "space_use_log"),
               names_to = "var", values_to = "value") %>%
  ggplot(aes(x = sex, y = value, col = var))+
  geom_jitter(height = 0, width = 0.2, alpha = 0.7)+
  geom_violin(fill = NA)+
  theme_minimal()+
  xlab("Age")+
  facet_wrap(~var, scales = "free")+
  scale_color_manual(values = colors)+
  theme(legend.position = "none")+ylab("")

red %>%
  filter(!is.na(sex), sex != "NA") %>%
  pivot_longer(cols = c("movement", "roost_div", "space_use_log"),
               names_to = "var", values_to = "value") %>%
  ggplot(aes(x = sex, y = value, col = var))+
  geom_jitter(height = 0, width = 0.2, alpha = 0.7)+
  geom_violin(fill = NA)+
  theme_minimal()+
  xlab("Age")+
  facet_grid(rows = vars(var), cols = vars(season), scales = "free")+
  scale_color_manual(values = colors)+
  theme(legend.position = "none")+ylab("")
```

Interestingly, if anything, the breeding season is when they show the *least* difference by sex! Weird.

Okay, yeah, so about those seasons:

```{r}
red %>%
  pivot_longer(cols = c("movement", "roost_div", "space_use_log"),
               names_to = "var", values_to = "value") %>%
  filter(var != "space_use") %>%
  ggplot(aes(x = value, group = seasonUnique, col = season))+
  geom_density()+ theme_minimal()+
  scale_color_manual(name = "Season", 
                     values = c(cc$breedingColor, 
                                cc$summerColor, 
                                cc$fallColor))+
  facet_wrap(~var, scales = "free")+
  ylab("Frequency")+xlab("")

red %>%
  pivot_longer(cols = c("movement", "roost_div", "space_use_log"),
               names_to = "var", values_to = "value") %>%
  filter(var != "space_use") %>%
  ggplot(aes(x = season, y = value))+
  geom_violin(aes(fill = season, col = season))+
  facet_wrap(~var, scales = "free")+
  theme_minimal()+
  scale_color_manual(name = "Season", 
                     values = c(cc$breedingColor, 
                                cc$summerColor, 
                                cc$fallColor))+
  scale_fill_manual(name = "Season", 
                     values = c(cc$breedingColor, 
                                cc$summerColor, 
                                cc$fallColor))+
  theme(legend.position = "none")+
  ylab("Value")+
  xlab("Season")
```

There's not a huge amount of differentiation by season, but there's a little bit. As expected, we do see the most movement in the summer and the least during the breeding season.
